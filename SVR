from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.colors as mcolors
from sklearn.model_selection import RandomizedSearchCV,train_test_split
from sklearn.svm import SVR

dataset = read_csv('ZGNNN.csv')

values = dataset.values
ymax = values[:, -1].max()
ymin = values[:, -1].min()

# n_hours = 12
# n_features = 1
# #标准化
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# # # # 构造一个3->1的监督学习型数据
a = scaled[:, : -1]
b = scaled[:, -1]

X = a[:, :]
y = b[:]
X1 = a[:, :]
y1 = b[:]





sepIndex = 57


# reframed = series_to_supervised(scaled, n_hours, 1)
# #划分Training set and Testing set
# values = reframed.values
# n_train_hours = 568
# train = values[:n_train_hours, :]
# test = values[n_train_hours:, :]
# n_obs = n_hours * n_features
train_X, train_y = X[:sepIndex, :], y[:sepIndex]
test_X, test_y = X[sepIndex:, :], y[sepIndex:]
#
# test_X, test_y = test[:, :n_obs], test[:, -n_features]
train_X = np.delete(train_X, [1,10,11,12,13], axis=1)
test_X = np.delete(test_X, [1,10,11,12,13], axis=1)



######################################################
a = np.arange(0, len(test_y), 1)
#建立SVR模型kernel = ['poly', 'sigmoid', 'rbf']
kernel = ['poly', 'sigmoid', 'rbf' ]
c = [0.0001,0.0002, 0.0005,0.01, 0.05, 0.1, 0.5, 1,2, 5]
gamma = [0.0001,0.0002, 0.0005, 0.001,0.005, 0.01, 0.05, 0.1,0.5, 1, 2]
epsilon = [0.0001, 0.0002, 0.0005, 0.001, 0.005, 0.01,0.05, 0.1, 1, 2]
shrinking = [True, False]
svm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking}
svm = SVR()
svm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=10, return_train_score=True, n_jobs=-1, n_iter=2000, verbose=1)
#for confirmed
svm_search.fit(train_X, train_y)
svm_search.best_params_
svm_confirmed = svm_search.best_estimator_
y_pred_comfirmed = svm_confirmed.predict(test_X)

y_pred = y_pred_comfirmed*(ymax-ymin) + ymin
bb = pd.DataFrame(y_pred)
bb.to_excel('ZG110TESTPRED.xlsx')
y_train_pred = svm_confirmed.predict(train_X)
inv_trainy = y_train_pred*(ymax-ymin) + ymin
inv_train_y = train_y*(ymax-ymin) + ymin
aa = pd.DataFrame(inv_trainy)
aa.to_excel('ZG110CPRED.xlsx')

test_y = test_y*(ymax-ymin) + ymin
print('MAE:', mean_absolute_error(y_pred, test_y))
print('RMSE:', np.sqrt(mean_squared_error(y_pred, test_y)))
print('R2:', r2_score(y_pred, test_y))
print(y_pred)
print(test_y)

plt.plot(a, y_pred, marker = 'o')
plt.plot(a, test_y, marker = 's')
plt.show()

b = np.arange(0, len(inv_trainy), 1)
plt.plot(b, inv_trainy, marker = 's')
plt.plot(b, inv_train_y, marker = 'o')
plt.show()

# #预测
# y_predictx_pred = svm_confirmed.predict(predictX)
# inv_y_predictx_pred = y_predictx_pred*(ymax-ymin) + ymin
# inv_predicty = predictY*(ymax-ymin) + ymin
# yyyyy = pd.DataFrame(inv_y_predictx_pred)
# yyyyy.to_excel('ZG111pred.xlsx')
#
# c = np.arange(0, len(predictY), 1)
#
# plt.plot(c, inv_predicty, marker = 'o')
# plt.plot(c, inv_y_predictx_pred, marker = 's')
# plt.show()
#
# print('MAE:', mean_absolute_error(inv_y_predictx_pred, inv_predicty))
# print('RMSE:', np.sqrt(mean_squared_error(inv_y_predictx_pred, inv_predicty)))
# print('R2:', r2_score(inv_y_predictx_pred, inv_predicty))
